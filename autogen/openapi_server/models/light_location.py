# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class LightLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, building=None, sensor_lat=None, sensor_lon=None, time=None, value_light=None):  # noqa: E501
        """LightLocation - a model defined in OpenAPI

        :param building: The building of this LightLocation.  # noqa: E501
        :type building: str
        :param sensor_lat: The sensor_lat of this LightLocation.  # noqa: E501
        :type sensor_lat: int
        :param sensor_lon: The sensor_lon of this LightLocation.  # noqa: E501
        :type sensor_lon: int
        :param time: The time of this LightLocation.  # noqa: E501
        :type time: str
        :param value_light: The value_light of this LightLocation.  # noqa: E501
        :type value_light: int
        """
        self.openapi_types = {
            'building': str,
            'sensor_lat': int,
            'sensor_lon': int,
            'time': str,
            'value_light': int
        }

        self.attribute_map = {
            'building': 'building',
            'sensor_lat': 'sensor_lat',
            'sensor_lon': 'sensor_lon',
            'time': 'time',
            'value_light': 'value_light'
        }

        self._building = building
        self._sensor_lat = sensor_lat
        self._sensor_lon = sensor_lon
        self._time = time
        self._value_light = value_light

    @classmethod
    def from_dict(cls, dikt) -> 'LightLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LightLocation of this LightLocation.  # noqa: E501
        :rtype: LightLocation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def building(self):
        """Gets the building of this LightLocation.


        :return: The building of this LightLocation.
        :rtype: str
        """
        return self._building

    @building.setter
    def building(self, building):
        """Sets the building of this LightLocation.


        :param building: The building of this LightLocation.
        :type building: str
        """

        self._building = building

    @property
    def sensor_lat(self):
        """Gets the sensor_lat of this LightLocation.


        :return: The sensor_lat of this LightLocation.
        :rtype: int
        """
        return self._sensor_lat

    @sensor_lat.setter
    def sensor_lat(self, sensor_lat):
        """Sets the sensor_lat of this LightLocation.


        :param sensor_lat: The sensor_lat of this LightLocation.
        :type sensor_lat: int
        """

        self._sensor_lat = sensor_lat

    @property
    def sensor_lon(self):
        """Gets the sensor_lon of this LightLocation.


        :return: The sensor_lon of this LightLocation.
        :rtype: int
        """
        return self._sensor_lon

    @sensor_lon.setter
    def sensor_lon(self, sensor_lon):
        """Sets the sensor_lon of this LightLocation.


        :param sensor_lon: The sensor_lon of this LightLocation.
        :type sensor_lon: int
        """

        self._sensor_lon = sensor_lon

    @property
    def time(self):
        """Gets the time of this LightLocation.


        :return: The time of this LightLocation.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this LightLocation.


        :param time: The time of this LightLocation.
        :type time: str
        """

        self._time = time

    @property
    def value_light(self):
        """Gets the value_light of this LightLocation.


        :return: The value_light of this LightLocation.
        :rtype: int
        """
        return self._value_light

    @value_light.setter
    def value_light(self, value_light):
        """Sets the value_light of this LightLocation.


        :param value_light: The value_light of this LightLocation.
        :type value_light: int
        """

        self._value_light = value_light
